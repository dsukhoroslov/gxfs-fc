openapi: 3.0.1

info:
  title: Gaia-X Catalogue
  description: 'This is the REST API of the Gaia-X catalogue'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

servers:
  - url: https://api.gaiax.io/v1

components:
  securitySchemes:
    oAuthNoScopes:
      type: oauth2
      description: 'This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)'
      flows:
        implicit:
          authorizationUrl: https://api.gaiax.io/oauth2/authorize
          scopes:
            read_self-descriptions: 'Read the Self-Descriptions.'
            write_self-descriptions: 'Add, delete, and update a Self-Description.'
            query: Send queries
  responses:
    NotFound:
      description: 'The specified resource was not found'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: 'Unauthorized'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: 'Forbidden. The user does not have the permission to execute this request.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: 'May contain hints how to solve the error or indicate what went wrong at the server. Must not outline any information about the internal structure of the server.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ClientError:
      description: 'May contain hints how to solve the error or indicate what was wrong in the request.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    # Schema for error response body
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    # Add schema for self-description
    Statements:
      type: object
      properties:
        statements:
          type: array
          items:
            $ref: '#/components/schemas/Statement'
          maxItems: 1 # only one statement can be sent for now. The array is for future extensions
    Statement:
      type: object
      properties:
        statement:
          type: string
          example: 'Match (m:Movie) where m.released > 2000 RETURN m'
        parameters:
          $ref: '#/components/schemas/Parameters'
      required:
        - statement
    Parameters: #!! why is this a parameter --> ggf ins Statement packen
      type: object
      properties:
        limit:
          type: string
          example: '10'
        offset:
          type: string
          example: '5'
    Results:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Result'
          maxItems: 1
      required:
        - results
    Result:
      type: object
      properties:
        columns:
          type: array
          example: ["column name 1", "column name 2"]
          items:
            type: string
            example: 'column names'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
      required:
        - columns
        - data
    VerificationResult:
      type: object
      properties:
        verification-timestamp:
          type: string
        lifecycle-status: #!! is not known when verifying external SDs
          type: string # does the self-description have a lifecycle status in this catalogue?
        issuer: #!! Is this the participant?
          type: object # contains the id of the issuers self-description if available  #!! NOT FURTHER SPECIFIED
        issued-date:
          type: string
        signatures:
          type: array
          items:
            type: object #!! NOT FURTHER SPECIFIED
      required:
        - verification-timestamp
        - lifecycle-status #!! is not known when verifying external SDs. Remove from required
        - issuer #!! Comment on issuer: if available, but still required?? Remove from required
        - issued-date
        - signatures
    Data:
      type: object
      properties:
        row:
          type: array
          example: ["value1", "value2"]
          items:
            type: string
        meta:
          type: array
          example: ["meta1", "meta2"]
          items:
            type: string
      required:
        - row
        - meta
    Participants:
      type: object
      properties:
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
        count: #!! Added: total count of Participants, for pagination.
          type: number
      required:
        - participants
    Participant:
      type: object
      properties:
        id:
          type: string
          description: 'Global ID of the participant'
        name:
          type: string
        public-key: #!! Can this be changed? If it is changed, are all SDs signed by the old key invalid?
          type: string
        self-description:
          type: string
    User:
      type: object
      properties:
        id: #!! should this be server-generated?
          type: string
          description: 'Internal catalogue user id'
          example: 'ExampleCompany-John-Doe'
        participantId:
          type: string
          description: 'Global ID of the associated participant'
          example: 'ExampleCompany'
        username:
          type: string
          example: 'John Doe'
        email:
          type: string
        roleIds:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Role: #!! Changed Role from an object with a single String property to simply a String
      type: string
      example: 'Ro-MU-CA'
    Schema:
      type: object
      properties:
        ontologies:
          description: 'Ontologies defining the terms of a schema'
          type: array
          items:
            type: string
        shapes:
          description: 'Shapes used to validate instances against the schema. SHACL Shapes Constraint Language.'
          type: array
          items:
            type: string
        vocabularies:
          description: 'Controlled vocabularies used in the scema'
          type: array
          items:
            type: string
    Session:
      type: object
      properties:
        userId:
          type: string
        creationDate:
          type: string
        status: #!! What is a status?
          type: string
        seed: #!! We must have a seed to do pagination, user must be able to set it?
          type: string
        roleIds:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Self-Description:
      type: object
      properties:
        sd-hash:
          type: string
        id: #!! Added id / credentialSubject
          type: string
        status:
          type: string
          enum:
            - 'active'
            - 'eol'
            - 'deprecated'
            - 'revoked'
          example: 'active'
        issuer:
          type: string
        validators:
          description: 'The credentialSubjects of the parties that validated (parts of) the Self-Description'
          type: array
          items:
            type: string
        upload-time:
          type: string
          example: '2022-03-01T13:00:00Z'
          description: 'The time stamp (ISO8601) when the SD was uploaded.'
        status-time:
          type: string
          example: '2022-05-11T15:30:00Z'
          description: 'The last time stamp (ISO8601) the status changed (for this Catalogue)'
  parameters:
    Offset:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
      required: false
      description: 'The number of items to skip before starting to collect the result set.'
    Limit:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 100
      required: false
      description: 'The number of items to return.'

security:
  - oAuthNoScopes:
      - read_self-descriptions
      - write_self-descriptions
      - query

tags:
  - name: discovery
    description: 'Announce the endpoints of this Catalogue'
  - name: self-descriptions
    description: 'Retrieving Self-Descriptions from the Catalogue. All Self-Descriptions are JSON-LD files. They are referenced by their sha256 hash. Catalogues synchronize by downloading changesets (lists of hashes) from known other Catalogues and reading the full Self-Descriptions of entries that are unknown to them'
    externalDocs:
      description: Find out more
      url: http://gaiax.io
  - name: sandbox
    description: 'Try changes to the JSON-LD Self-Descriptions against the catalogue in a sandbox, i.e. the changes are not really applied. But the error messages allow the debugging of Self-Descriptions wrt trust and validation of the content on a syntactical and semantic level'
    externalDocs:
      description: 'Find out more'
      url: http://gaiax.io
  - name: query
    description: 'Send graph queries to this Catalogue'
  - name: users
    description: 'User management for Catalogues not connected to an external IAM system'
  - name: participants
    description: 'Management for registered participants in the catalogue'
  - name: schemas
    description: 'The format of the self-descriptions are defined by schemas in the catalogue. Here you get information about the latest schema'
  - name: roles
    description: 'Management for the permission roles in the catalogue'
  - name: verification
    description: 'The Catalogue provides a verification service for e.g. checking the syntax'

paths:
  /:
    get:
      tags:
        - discovery
      summary: 'Announce all endpoints'
      operationId: discovery
      responses:
        200:
          description: 'Provides a JSON element with relative paths to all other available endpoints of this Catalogue'
          content:
            application/json:
              schema:
                type: object
                properties:
                  query:
                    type: string
                    example: './query'
                  self-descriptions:
                    type: string
                    example: './self-descriptions'
                  self_description_hash:
                    type: string
                    example: './self-descriptions/{self_description_hash}'
            application/ld+json: # !! warum bieten wir json und json+ld an?
              schema:
                type: object
                properties:
                  '@context':
                    type: object
                    properties:
                      gax:
                        type: string
                        example: "http://gaia-x.eu/gaiaxOntology#"
                  '@id':
                    type: string
                    example: "<the identifier of this catalogue>"
                  gax:hasQueryEndpoint:
                    type: string
                    example: './query'
                  gax:hasSelfDescriptionEndpoint:
                    type: string
                    example: './self-descriptions'
                  gax:hasSelfDescriptionHashEndpoint:
                    type: string
                    example: './self-descriptions/{self_description_hash}' # !! Welchen Hash gibt der hier zurück
                  gax:isOperatedBy:
                    type: string
                    example: 'http://example.org/CatalogueProvider'

  /verifications/self-descriptions:
    get:
      tags:
        - verification
      summary: 'Show a HTML page to verify (portions of) a signed Self-Description'
      operationId: verifyPage
      responses:
        200:
          description: 'HTML document that contains a query field to verify (portions of) Self-Descriptions'
          content:
            text/html:
              schema:
                type: string
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - verification
      summary: 'Send a JSON-LD document to verify with the information from the Catalogue'
      operationId: verify
      requestBody:
        description: 'JSON-LD document to be verified'
        content: {}
      responses:
        200:
          description: 'Verification result'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationResult'
        400:
          $ref: '#/components/responses/ClientError'
        408: #!! Should we use async response instead?
          description: 'Timeout: the verification took longer than the configured timeout interval'
        500:
          $ref: '#/components/responses/ServerError'

  /session: #!! Changed to singular, since a user has only 1 session, and the get response is only one session.
    get:
      tags:
        - session
      responses:
        200:
          description: 'Get information on the current session'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
    post:
      tags:
        - session
      summary: 'Set the query seed for the session. All properties other than "seed" are ignored.'
      operationId: setSeed
      requestBody:
        description: 'Session with a seed'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        201:
          description: 'Seed set'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
  /session/logout: #!! This should be an implementation detail, logout is SSO-system dependent
    post: #!! Changed to POST, because GET should never have side-effects-
      tags:
        - session
      responses:
        200:
          description: 'The current session was closed'

  /participants:
    get: #!! Needs pagination; Should this really include the entire Participant SD, or only the hash?
      tags:
        - participants
      summary: 'Get the registered participants'
      operationId: listParticipants
      parameters: #!! Added pagination parameters
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: 'List of registered participants'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participants' #!! changed to array
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - participants
      summary: 'Register a new participant in the catalogue'
      operationId: addParticipant
      requestBody:
        description: 'Participant Self-Description'
        content:
          application/json-ld:
            schema:
              $ref: '#/components/schemas/Participant'
      responses: #!! Should contain a Location header with the link to the new participant?
        201:
          description: 'Created'
          headers: #!! Added location header with participant URL
            location:
              description: 'URL of the added Participant'
              schema:
                type: string
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
  /participants/{participantId}:
    get:
      tags:
        - participants
      summary: 'Get the registered participant'
      operationId: getParticipant
      parameters:
        - in: path
          name: participantId
          required: true
          description: 'The participantId to get'
          schema:
            type: string
      responses:
        200:
          description: 'The requested participant'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - participants
      summary: 'Update a participant in the catalogue'
      operationId: updateParticipant
      parameters: #!! fehlt da nicht irgendwie das update?
        - in: path
          name: participantId
          required: true
          description: 'The participant to update'
          schema:
            type: string
      requestBody: #!! Added participant as request body
        description: 'Participant Self-Description'
        required: true
        content:
          application/json-ld:
            schema:
              $ref: '#/components/schemas/Participant'
      responses:
        200:
          description: 'Updated Participant'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - participants
      summary: 'Delete a participant in the catalogue'
      operationId: deleteParticipant
      parameters:
        - in: path
          name: participantId
          required: true
          description: 'The participant to delete'
          schema:
            type: string
      responses:
        200:
          description: 'Deleted Participant'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
  /participants/{participantId}/users:
    get:
      tags:
        - participants
      summary: 'Get all users of the registered participant'
      operationId: getUsersOfParticipant
      parameters:
        - in: path
          name: participantId
          required: true
          description: 'The participant to create'
          schema:
            type: string
        #!! Added pagination parameters
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: 'Users of the participant'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'

  /users: #!! This may conflict with an SSO setup using an external auth provider
    get: #!! potentially long list needs pagination
      tags:
        - users
      summary: 'List the registered users'
      operationId: listUsers
      parameters: #!! Added pagination parameters
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: 'List of usernames'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - users
      summary: 'Register a new user to the associated participant in the catalogue'
      operationId: addUser
      requestBody:
        description: User Self-Description
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: 'Created'
          headers: #!! Added location header with user URL
            location:
              description: 'URL of the added User'
              schema:
                type: string
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
  /users/{userId}:
    get:
      tags:
        - users
      summary: Get the user profile
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'User profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - users
      summary: 'Update the user profile'
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: 'Updated user data, User ID and Participant ID will be ignored if provided.'
        required: true
        content: #!! User ID and Participant ID should be ignored if provided
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Updated user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - users
      summary: 'Delete a user'
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Deleted user profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
  /users/{userId}/roles:
    get:
      tags:
        - users
      summary: 'Get the roles of the user'
      operationId: getUserRoles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'User roles'
          content:
            application/json:
              schema:
                type: array #!! Changed to array, since roles implies plural
                items:
                  $ref: '#/components/schemas/Role'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - users
      summary: 'Update the roles of the user'
      operationId: updateUserRoles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: 'List of roles which should be assigned to the user. Roles not in the list are removed from the user.'
        content:
          application/json:
            schema:
              type: array #!! Changed to array, since roles implies plural
              items:
                $ref: '#/components/schemas/Role'
      responses:
        200:
          description: 'All assigned roles of the user'
          content:
            application/json:
              schema:
                type: array #!! Changed to array, since roles implies plural
                items:
                  $ref: '#/components/schemas/Role'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'

  /query: #!! Suggestion: rename to query, and allow only a single query. If multiple queries are ever added in the future, add an endpoint queries.
    get:
      tags:
        - query
      summary: 'Retrieve an HTML website to send openCypher queries to the Catalogue'
      operationId: querywebsite
      security:
        - oAuthNoScopes:
            - query
      responses:
        200:
          description: 'HTML document that contains a query field for openCypher queries'
          content:
            text/html:
              schema:
                type: string
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - query
      summary: 'Send a query to the Catalogue'
      operationId: query
      parameters:
        - in: header
          name: query-language
          schema:
            type: string
            enum: [openCypher, application/sparql-query, sparql*]
            default: openCypher
          required: true
      security:
        - oAuthNoScopes:
            - query
      requestBody:
        description: 'JSON object to send queries. Use "application/json" for openCypher queries. A Catalogue may also support the other content types depending on its supported query languages but only "application/json" is mandatory'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Statement'
          application/sparql-query:
            example: ''
          'sparql*':
            example: ''
      responses:
        200:
          description: 'successful query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results'
            application/sparql-results+xml:
              example: ''
            text/turtle:
              example: ''
            text/html:
              example: ''
        400:
          description: 'Malformed Message: The receveived request cannot be processed, either because its syntax is incorrect or forbidden query clauses are used. For instance, it is not allowed to manipulate data through the query endpoint'
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ClientError'
        408:
          description: 'Query Timeout: the query took longer than the configured timeout interval. The client needs to rewrite the query so it can be processed faster'
        500:
          $ref: '#/components/responses/ServerError'

  /self-descriptions:
    get:
      tags:
        - self-descriptions
      summary: 'Get the list of metadata of Self-Descriptions in the Catalogue'
      operationId: readSelfDescriptions
      parameters: #!! Added filter parameters for all(?) metadata fields
        - name: upload-timerange
          in: query
          description: 'Filter for the time range when the Self-Description was uploaded to the catalogue. The time range has to be specified as start time and end time as ISO8601 timestamp separated by a `/`.'
          required: false
          example: '2022-03-01T13:00:00Z/2022-05-11T15:30:00Z'
          schema:
            type: string
        - name: status-timerange
          in: query
          description: 'Filter for the time range when the status of the Self-Description was last changed in the catalogue. The time range has to be specified as start time and end time as ISO8601 timestamp separated by a `/`.'
          required: false
          example: '2022-03-01T13:00:00Z/2022-05-11T15:30:00Z'
          schema:
            type: string
        - name: issuer
          in: query
          description: 'Filter for the issuer of the Self-Description. This is the unique ID of the Participant that has prepared the Self-Description.'
          required: false
          schema:
            type: string
        - name: validator
          in: query
          description: 'Filter for a validator of the Self-Description. This is the unique ID of the Participant that validated (part of) the Self-Description.'
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: 'Filter for the status of the Self-Description.'
          required: false
          schema:
            type: string
            default: 'active'
            enum:
              - 'active'
              - 'eol'
              - 'deprecated'
              - 'revoked'
        - name: id
          in: query
          description: 'Filter for a id/credentialSubject of the Self-Description.'
          required: false
          schema:
            type: string
        - name: hash
          in: query
          description: 'Filter for a hash of the Self-Description.'
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: 'List of meta data of available Self-Descriptions.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Self-Description'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - self-descriptions
      summary: 'Add a new Self-Description to the catalogue'
      operationId: addSelfDescription
      security:
        - oAuthNoScopes:
            - write_self-descriptions
      requestBody:
        description: The new Self-Description
        content:
          application/ld+json: {}
        required: true
      responses:
        201:
          description: 'Created'
          headers:
            location:
              description: 'URL of the added Self-Description.'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Self-Description'
        202:
          description: 'The request was accepted but the validation is not finished yet.'
          headers:
            location:
              description: 'The URL of the status page.'
              schema:
                type: string
            retry-after:
              description: 'The delay the client have to wait before requesting the status page.'
              schema:
                type: integer
        400:
          $ref: '#/components/responses/ClientError'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'
  /self-descriptions/{self_description_hash}:
    get:
      tags:
        - self-descriptions
      summary: 'Read a Self-Description by its hash. This returns the content of the self-description.'
      description: 'Returns a single Self-Description'
      operationId: readSelfDescriptionByHash
      parameters:
        - name: self_description_hash
          in: path
          description: 'Hash of the self-description'
          required: true
          schema:
            type: string
      security:
        - oAuthNoScopes:
            - read_self-descriptions
      responses:
        200:
          description: 'The requested Self-Description'
          content:
            application/ld+json: {}
        404:
          description: 'Self-Description not found'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - self-descriptions
      summary: 'Completely delete a self-description'
      operationId: deleteSelfDescription
      parameters:
        - name: self_description_hash
          in: path
          description: 'Hash of the self-description'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'OK'
        400:
          $ref: '#/components/responses/ClientError'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'
  /self-descriptions/{self_description_hash}/revoke:
    post:
      tags:
        - self-descriptions
      summary: 'Change the lifecycle state of a Self-Description to revoked.'
      operationId: updateSelfDescription
      parameters:
        - name: self_description_hash
          in: path
          description: 'Hash of the self-description'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Revoked'
          headers:
            location:
              description: 'URL of the added Self-Description'
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Self-Description'
        400:
          $ref: '#/components/responses/ClientError'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'

  /schemas:
    get:
      tags:
        - schemas
      summary: 'Get the full list of schemas.'
      operationId: getSchemas
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: 'All schemas'
          content:
            application/json: #!! schema + ld?
              schema: #!! How can a user see the version/state of a schema? Or does this only give active ones?
                type: array #!! Is 'type' part of the schema schema, or should we change this to an oject with using type:schema
                items:
                  $ref: '#/components/schemas/Schema'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - schemas
      summary: 'Add a new Schema to the catalogue, or replace an existing schema that has the same IRI'
      operationId: addSchema
      security:
        - oAuthNoScopes:
            - write_schema
      requestBody:
        description: The new Schema
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
        required: true
      responses:
        201:
          description: 'Created'
          headers:
            location:
              description: 'URL of the added Schema.'
              schema:
                type: string
        400:
          $ref: '#/components/responses/ClientError'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'
  /schemas/{schemaId}:
    get:
      tags:
        - schemas
      summary: 'Get a specific schema.'
      operationId: getSchema
      parameters:
        - name: schemaId
          in: path
          description: 'Identifier of the Schema'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'A specific Schema'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - schemas
      summary: 'Delete a Schema'
      operationId: deleteSchema
      parameters:
        - name: schemaId
          in: path
          description: 'Identifier of the Schema'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Deleted Schema'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
  /schemas/latest:
    get: #!! wo kommen neue schema her?
      tags:
        - schemas
      summary: 'Get the latest composite schema of all types'
      operationId: getLatestSchemas
      responses:
        200:
          description: 'The latest schemas of all types'
          content:
            application/json: #!! schema + ld?
              schema:
                type: array #!! Is 'type' part of the schema schema, or should we change this to an oject with using type:schema
                items:
                  $ref: '#/components/schemas/Schema'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
  /schemas/latest/{type}: #!! What is a schema type?
    get:
      tags:
        - schemas
      summary: 'Get latest schemas of a specific type'
      operationId: getLatestSchemaOfType
      parameters:
        - name: type
          in: path
          description: 'Type of the requested Self-Description schema e.g. Service'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'The latest schema of requested types'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
        405:
          description: 'Invalid input'
          content: {}
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'

  /roles:
    get:
      tags:
        - roles
      summary: 'Get all possible roles in the catalogue'
      operationId: getAllRoles
      responses:
        200:
          description: 'All roles' #!! Liste?
          content:
            application/json:
              schema:
                type: array #!! Changed to array, since roles implies plural
                items:
                  $ref: '#/components/schemas/Role'
        400:
          $ref: '#/components/responses/ClientError'
        500:
          $ref: '#/components/responses/ServerError'
