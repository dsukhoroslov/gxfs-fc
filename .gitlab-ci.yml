variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

image: maven:3.8.4-jdk-11

stages:
  - check
  - compile
  - test
  - build-and-push
  - pull-and-deploy

.docker_login_and_docker_compose_install:
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - apk update && apk add docker-compose

.rules_for_deploy:
  rules:
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == 'feature/GAIAXFC-89'
      when: on_success
#    - if: $CI_TARGET_ENV == 'prod'
#      when: manual
    - when: never

check:
  stage: check
  when: always
  script:
    - 'mvn $MAVEN_CLI_OPTS clean validate'

compile:
  stage: compile
  when: on_success
  script:
    - 'mvn $MAVEN_CLI_OPTS compile'

test:
  stage: test
  when: on_success
  script:
    - 'mvn $MAVEN_CLI_OPTS test'

# Stages `build-and-push` and `pull-and-deploy` doesn't run for merge requests.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

build-and-push:
  image: docker
  extends:
    - .docker_login_and_docker_compose_install
    - .rules_for_deploy
  stage: build-and-push
  script:
    - docker-compose -f docker/docker-compose.yml --env-file docker/.env.$CI_TARGET_ENV build
    - docker-compose -f docker/docker-compose.yml --env-file docker/.env.$CI_TARGET_ENV push
    - docker system prune -af --filter "until=168h"

pull-and-deploy:
  image: docker
  extends:
    - .docker_login_and_docker_compose_install
    - .rules_for_deploy
  environment:
    name: $CI_TARGET_ENV
  stage: pull-and-deploy
  script:
    - docker-compose -f docker/docker-compose.yml --env-file docker/.env.$CI_TARGET_ENV pull
    - docker-compose -f docker/docker-compose.yml --env-file docker/.env.$CI_TARGET_ENV up -d --force-recreate
    - docker system prune -af --filter "until=168h"
    - nohup docker logs federated-catalogue-server -f >> /var/log/federated-catalogue/fc-server.log 2>&1 &

# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
sast:
  stage: test
  variables:
    MAVEN_REPO_PATH: $CI_PROJECT_DIR/.m2/repository
    COMPILE: "false"
  artifacts:
    paths: [ gl-sast-report.json ]
    reports:
      sast: gl-sast-report.json

include:
- template: Security/Dependency-Scanning.gitlab-ci.yml  
- template: Security/SAST.gitlab-ci.yml